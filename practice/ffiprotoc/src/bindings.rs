/* automatically generated by rust-bindgen 0.64.0 */

#[repr(C)]
#[derive(Debug)]
pub struct foo {
    pub _address: u8,
}
#[test]
fn bindgen_test_layout_foo() {
    assert_eq!(
        ::std::mem::size_of::<foo>(),
        1usize,
        concat!("Size of: ", stringify!(foo))
    );
    assert_eq!(
        ::std::mem::align_of::<foo>(),
        1usize,
        concat!("Alignment of ", stringify!(foo))
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN3foo4sendEi"]
    pub fn foo_send(this: *mut foo, a: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}__ZN3foo4recvEi"]
    pub fn foo_recv(this: *mut foo, a: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}__ZN3fooC1Ev"]
    pub fn foo_foo(this: *mut foo);
}
extern "C" {
    #[link_name = "\u{1}__ZN3fooD1Ev"]
    pub fn foo_foo_destructor(this: *mut foo);
}
impl foo {
    #[inline]
    pub unsafe fn send(&mut self, a: ::std::os::raw::c_int) {
        foo_send(self, a)
    }
    #[inline]
    pub unsafe fn recv(&mut self, a: ::std::os::raw::c_int) {
        foo_recv(self, a)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        foo_foo(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        foo_foo_destructor(self)
    }
}
