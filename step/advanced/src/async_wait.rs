// 并发模型
// 1. OS 线程, 就是操作系统的线程
// 2. 事件驱动(Event Driver), 就是回调. js 使用
// 3. 协成,go 使用.
// 4. todo actor 模型,erlang 使用,不清原理
// 5. async/await ,类似 协程,但是没有 go 中实现的运行时,要自己实现,推荐tokio
// rust 提供了关键字支持,提供了必要特性支持,以下都是 async 概念

// 概念: Future, 一个在未来某个点被调度的任务.
// async VS 多线程
// 多线程线程切换资源大,要用线程池,适合 CPU 密集型,也就是不经常切换线程,一直处理一个任务
// async 适合 io 密集型,也就是不同的任务很多. 可以设置一个线程处理多个任务,因为每个任务处理的很快,
// 这个时候如果切换线程反而浪费时间了.
// 如果是 cpu 密集型,单独创建一个线程,比 async 模式,更好.

//原理:
